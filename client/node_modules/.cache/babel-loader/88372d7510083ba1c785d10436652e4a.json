{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionAsync() {\n  yield console.log('I\\'m fired');\n  const collectionRef = firestore.collection('collections');\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["C:/Arthur/Coding/Projekty/ztm/e-commerce/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","fetchCollectionAsync","console","log","collectionRef","firestore","collection","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","dispatch","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","fetchCollectionStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,oBAAxB;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAGA,OAAO,UAAUC,oBAAV,GACP;AACI,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AACA,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB;AACIF,EAAAA,aAAa,CAACG,GAAd,GACCC,IADD,CACMC,QAAQ,IAAE;AACZ,UAAMC,cAAc,GAAGC,+BAA+B,CAACF,QAAD,CAAtD;AACAG,IAAAA,QAAQ,CAACC,uBAAuB,CAACH,cAAD,CAAxB,CAAR;AACH,GAJD,EAKCI,KALD,CAKOC,KAAK,IAAIH,QAAQ,CAACI,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CALxB;AAMP;AAED,OAAO,UAAUC,oBAAV,GAAgC;AACnC,QAAMnB,SAAS,CACXC,eAAe,CAACmB,uBADL,EAEXlB,oBAFW,CAAf;AAIH","sourcesContent":["import {takeEvery} from 'redux-saga/effects';\r\nimport ShopActionTypes from './shop.types';\r\n\r\n\r\nexport function* fetchCollectionAsync()\r\n{\r\n    yield console.log('I\\'m fired');  \r\n    const collectionRef = firestore.collection('collections');        \r\n        collectionRef.get()\r\n        .then(snapshot=>{\r\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n            dispatch(fetchCollectionsSuccess(collectionsMap));           \r\n        })\r\n        .catch(error => dispatch(fetchCollectionsFailure(error.message)));  \r\n}\r\n\r\nexport function* fetchCollectionStart(){\r\n    yield takeEvery(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionAsync\r\n        );\r\n}"]},"metadata":{},"sourceType":"module"}