{"ast":null,"code":"import _objectSpread from \"C:\\\\Arthur\\\\Coding\\\\Projekty\\\\ztm\\\\e-commerce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Arthur\\\\Coding\\\\Projekty\\\\ztm\\\\e-commerce\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Arthur\\\\Coding\\\\Projekty\\\\ztm\\\\e-commerce\\\\src\\\\components\\\\sign-in\\\\sign-in.component.jsx\";\nimport React, { useState } from 'react';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\nimport { connect } from 'react-redux';\nimport { SignInContainer, SignInTitle, ButtonsBarContainer } from './sign-in.styles';\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  const _useState = useState({\n    email: '',\n    password: ''\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCredentials = _useState2[0],\n        setCredentials = _useState2[1];\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const email = userCredentials.email,\n          password = userCredentials.password;\n    emailSignInStart(email, password);\n  };\n\n  const handleChange = event => {\n    const _event$target = event.target,\n          value = _event$target.value,\n          name = _event$target.name;\n    setCredentials(_objectSpread({}, userCredentials, {\n      [name]: value\n    }));\n  };\n\n  return React.createElement(SignInContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(SignInTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"I already have an account\"), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Sign in with your email and password\"), React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    handleChange: handleChange,\n    value: email,\n    label: \"email\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    handleChange: handleChange,\n    label: \"password\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), React.createElement(ButtonsBarContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(CustomButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \" Sign in \"), React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Sign in with Google\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["C:/Arthur/Coding/Projekty/ztm/e-commerce/src/components/sign-in/sign-in.component.jsx"],"names":["React","useState","FormInput","CustomButton","googleSignInStart","emailSignInStart","connect","SignInContainer","SignInTitle","ButtonsBarContainer","SignIn","email","password","userCredentials","setCredentials","handleSubmit","event","preventDefault","handleChange","target","value","name","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport FormInput from '../form-input/form-input.component';\nimport CustomButton from '../custom-button/custom-button.component';\nimport {googleSignInStart,emailSignInStart} from '../../redux/user/user.actions';\nimport {connect} from 'react-redux';\nimport {\n  SignInContainer,\n  SignInTitle,\n  ButtonsBarContainer\n} from './sign-in.styles';\n\nconst SignIn = ({emailSignInStart,googleSignInStart})=> {\n  const [userCredentials,setCredentials] = useState({email: '',password: ''});\n  const handleSubmit = async event => {\n    event.preventDefault();    \n    const { email, password } = userCredentials;\n    emailSignInStart(email,password);\n  };\n  const handleChange = event => {\n    const { value, name } = event.target;\n   setCredentials({...userCredentials, [name]: value });\n  };  \n   \n    return (\n      <SignInContainer>\n        <SignInTitle>I already have an account</SignInTitle>\n        <span>Sign in with your email and password</span>\n\n        <form onSubmit={handleSubmit}>\n          <FormInput\n            name=\"email\"\n            type=\"email\"\n            handleChange={handleChange}\n            value={email}\n            label=\"email\"\n            required\n          />\n          <FormInput\n            name=\"password\"\n            type=\"password\"\n            value={password}\n            handleChange={handleChange}\n            label=\"password\"\n            required\n          />\n          <ButtonsBarContainer>\n            <CustomButton type=\"submit\"> Sign in </CustomButton>\n            <CustomButton type=\"button\" onClick={googleSignInStart} isGoogleSignIn>\n              Sign in with Google\n            </CustomButton>\n          </ButtonsBarContainer>\n        </form>\n      </SignInContainer>\n    );\n}\n\n\nconst mapDispatchToProps = dispatch=>({\n  googleSignInStart: ()=>dispatch(googleSignInStart()),\n  emailSignInStart: (email,password)=>dispatch(emailSignInStart({email,password}))\n});\n\nexport default connect(null,mapDispatchToProps)(SignIn);\n"]},"metadata":{},"sourceType":"module"}