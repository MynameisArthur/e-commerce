{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nexport function* fetchCollectionAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\nexport function* fetchCollectionStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["C:/Arthur/Coding/Projekty/ztm/e-commerce/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAAQA,UAAR,EAAmBC,IAAnB,EAAwBC,GAAxB,EAA4BC,GAA5B,QAAsC,oBAAtC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAAQC,SAAR,EAAkBC,+BAAlB,QAAwD,+BAAxD;AACA,SAAQC,uBAAR,EAAgCC,uBAAhC,QAA8D,gBAA9D;AAEA,OAAO,UAAUC,oBAAV,GACP;AACI,MAAG;AACC,UAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMb,IAAI,CAACK,+BAAD,EAAiCM,QAAjC,CAAjC;AACA,UAAMV,GAAG,CAACK,uBAAuB,CAACO,cAAD,CAAxB,CAAT;AACH,GALD,CAKC,OAAMC,KAAN,EAAY;AACT,UAAMb,GAAG,CAACM,uBAAuB,CAACO,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,oBAAV,GAAgC;AACnC,QAAMjB,UAAU,CACZI,eAAe,CAACc,uBADJ,EAEZT,oBAFY,CAAhB;AAIH","sourcesContent":["import {takeLatest,call,put,all} from 'redux-saga/effects';\r\nimport ShopActionTypes from './shop.types';\r\nimport {firestore,convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\nimport {fetchCollectionsSuccess,fetchCollectionsFailure} from './shop.actions';\r\n\r\nexport function* fetchCollectionAsync()\r\n{\r\n    try{\r\n        const collectionRef = firestore.collection('collections');        \r\n        const snapshot = yield collectionRef.get();\r\n        const collectionsMap = yield call(convertCollectionsSnapshotToMap,snapshot);   \r\n        yield put(fetchCollectionsSuccess(collectionsMap));\r\n    }catch(error){\r\n        yield put(fetchCollectionsFailure(error.message));\r\n    }  \r\n}\r\n\r\nexport function* fetchCollectionStart(){\r\n    yield takeLatest(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionAsync\r\n        );\r\n}"]},"metadata":{},"sourceType":"module"}